{"version":3,"sources":["api/APIClient.ts","api/SubredditClient.ts","components/subreddit/Subreddit.tsx","components/post/Post.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["APIClient","DEVICE_ID","_token","url","params","this","getDefaultHeaders","headers","request","method","fetch","API_URL","fetchToken","Headers","Authorization","window","btoa","CLIENT_ID","body","encodeURIComponent","AUTH_URL","response","access_token","ok","json","authenticate","get","includes","Promise","reject","statusText","client","id","after","URLSearchParams","append","post","Subreddit","useParams","useState","setAbout","posts","setPosts","useEffect","a","SubredditClient","about","className","data","children","map","value","index","to","stickied","title","link_flair_text","style","backgroundColor","link_flair_background_color","ups","num_comments","author","Post","postId","comments","setComments","setPost","sanitize","html","DOMPurify","dangerouslySetInnerHTML","__html","selftext_html","body_html","App","basename","process","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.16bfd5f1.chunk.js","sourcesContent":["import { OAuthResponse } from '../types';\r\n\r\nclass APIClient {\r\n    private static readonly API_URL = 'https://oauth.reddit.com/';\r\n    private static readonly AUTH_URL = 'https://www.reddit.com/api/v1/access_token';\r\n    private static readonly CLIENT_ID = 'LzBGozxpbmJNRA'\r\n\r\n    private readonly DEVICE_ID = 'DO_NOT_TRACK_THIS_DEVICE';\r\n    private _token?: string;\r\n\r\n    public async get<T>(url: string, params?: URLSearchParams): Promise<T> {\r\n        if(params)\r\n            url = `${url}?${params}`;\r\n\r\n        const headers = await this.getDefaultHeaders();\r\n        const request: RequestInit = {\r\n            headers: headers,\r\n            method: 'GET'\r\n        }\r\n\r\n        return await this.fetch<T>(APIClient.API_URL + url, request);\r\n    }\r\n\r\n    private async getDefaultHeaders(): Promise<Headers> {\r\n        if(!this._token)\r\n            this._token = await this.fetchToken();\r\n\r\n        return new Headers({\r\n            Authorization: `bearer ${this._token}`,\r\n            'Content-Type': 'application/json'\r\n        })\r\n    }\r\n\r\n    private async fetchToken(): Promise<string> {\r\n        const request: RequestInit = {\r\n            headers: {\r\n                Authorization: `Basic ${ window.btoa(`${ APIClient.CLIENT_ID }:`) }`,\r\n                'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'\r\n            },\r\n            method: 'POST',\r\n            body: `grant_type=${ encodeURIComponent('https://oauth.reddit.com/grants/installed_client') }&device_id=${ this.DEVICE_ID }`,\r\n        }\r\n\r\n        const response = await this.fetch<OAuthResponse>(APIClient.AUTH_URL, request);\r\n        return response.access_token;\r\n    }\r\n\r\n    private async fetch<T>(url: string, request: RequestInit): Promise<T> {\r\n        const response = await window.fetch(url, request);\r\n\r\n        if (response.ok)\r\n            return await response.json() as T;\r\n        else {\r\n            const authenticate = response.headers.get('www-authenticate')\r\n            if (authenticate && authenticate.includes('invalid_token')) {\r\n                this._token = await this.fetchToken();\r\n                const headers = request.headers as Record<string, string>;\r\n                headers['Authorization'] = `bearer ${ this._token }`;\r\n                return await this.fetch<T>(url, request);\r\n            }\r\n            return Promise.reject(response.statusText);\r\n        }\r\n    }\r\n}\r\n\r\nexport default new APIClient();\r\n","import { About, Data, Listing, Post } from '../types';\r\nimport APIClient from './APIClient';\r\n\r\nclass SubredditClient {\r\n    public async about(id: string): Promise<Data<About>> {\r\n        return await APIClient.get(`r/${id}/about`);\r\n    }\r\n\r\n    public async posts(id: string, after?: string): Promise<Listing<Post>> {\r\n        const params = new URLSearchParams({'raw_json': '1'});\r\n        if(after)\r\n            params.append('after', after);\r\n        return await APIClient.get(`r/${id}`, params);\r\n    }\r\n\r\n    public async comments(id: string, post: string): Promise<Listing<any>[]> {\r\n        return await APIClient.get(`r/${id}/comments/${post}`, new URLSearchParams({'raw_json': '1'}))\r\n    }\r\n}\r\n\r\nvar client = new SubredditClient();\r\nexport default client;\r\n","import { ReactElement, useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { About, Data, Listing, Post } from '../../types';\r\nimport { Link } from 'react-router-dom';\r\nimport SubredditClient from '../../api/SubredditClient';\r\nimport { FaArrowUp, FaComment } from 'react-icons/fa';\r\nimport { AiFillPushpin } from 'react-icons/ai';\r\nimport './Subreddit.css';\r\n\r\ntype UrlParams = { id: string };\r\n\r\nexport default function Subreddit(): ReactElement {\r\n    const { id } = useParams<UrlParams>();\r\n\r\n    const [after, setAfter] = useState<string>();\r\n    const [about, setAbout] = useState<Data<About>>();\r\n    const [posts, setPosts] = useState<Listing<Post>>();\r\n\r\n    useEffect(() => {\r\n        async function about() {\r\n            const response = await SubredditClient.about(id);\r\n            setAbout(response);\r\n        }\r\n        about();\r\n    }, [ id ]);\r\n\r\n    useEffect(() => {\r\n        async function posts() {\r\n            const response = await SubredditClient.posts(id, after);\r\n            setPosts(response);\r\n        }\r\n        posts()\r\n    }, [ id, after ]);\r\n\r\n    return (\r\n        <div className='container'>\r\n            <div className='content'>\r\n                {posts?.data.children.map((value, index) => {\r\n                  return (\r\n                      <Link to={`/r/${id}/comments/${value.data.id}`}>\r\n                          <div className={'post ' + (value.data.stickied ? 'sticky' : '')} key={index}>\r\n                              { value.data.stickied && <AiFillPushpin className={'sticky-pin'} /> }\r\n                              <p className='title'>\r\n                                  <b>{value.data.title}</b>\r\n                              </p>\r\n                              <div className='footer'>\r\n                                  <div className='left'>\r\n                                      {   value.data.link_flair_text &&\r\n                                          <span className={'flair'} style={{backgroundColor: value.data.link_flair_background_color}}>\r\n                                              { value.data.link_flair_text }\r\n                                          </span>\r\n                                      }\r\n                                  </div>\r\n                                  <div className='right'>\r\n                                      <span className='upvotes'>\r\n                                          <FaArrowUp />\r\n                                          {value.data.ups}\r\n                                      </span>\r\n                                      <span className='comments'>\r\n                                          <FaComment />\r\n                                          <span>{value.data.num_comments}</span>\r\n                                      </span>\r\n                                      <span className='author'>\r\n                                          by <span>u/{value.data.author}</span>\r\n                                      </span>\r\n                                  </div>\r\n                              </div>\r\n                          </div>\r\n                      </Link>\r\n                  )\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import { ReactElement, useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport SubredditClient from '../../api/SubredditClient';\r\nimport { Data, Listing, Post as IPost } from '../../types';\r\nimport DOMPurify from 'dompurify';\r\nimport './Post.css';\r\n\r\ntype UrlParams = { id: string, postId: string };\r\n\r\nexport default function Post(): ReactElement {\r\n    const { id, postId } = useParams<UrlParams>();\r\n\r\n    const [comments, setComments] = useState<Listing<any>>();\r\n    const [post, setPost] = useState<Data<IPost>>();\r\n\r\n    useEffect(() => {\r\n        async function comments() {\r\n            const response = await SubredditClient.comments(id, postId);\r\n            setPost(response[0].data.children[0] as Data<IPost>);\r\n            setComments(response[1]);\r\n        }\r\n        comments();\r\n    }, [ id, postId ]);\r\n\r\n    const sanitize = (html?: string): string => {\r\n        if(!html)\r\n            return '';\r\n        return DOMPurify.sanitize(html);\r\n    }\r\n\r\n    return (\r\n        <div className='container'>\r\n            <div className='content'>\r\n                <div className='post'>\r\n                    <h3> { post?.data.title } </h3>\r\n                    <div dangerouslySetInnerHTML={{ __html: sanitize(post?.data.selftext_html)}}>\r\n                    </div>\r\n                </div>\r\n                <div className='comments'>\r\n                    {comments?.data.children.map((value, index) => {\r\n                       return <div className='comment'>\r\n                           <span>{ value.data.ups }</span>\r\n                           <span> by u/{ value.data.author }</span>\r\n                           <div className='comment-body' dangerouslySetInnerHTML={ {__html: sanitize(value.data.body_html)} }/>\r\n                       </div>\r\n                    }) }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import { ReactElement } from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport Subreddit from './components/subreddit/Subreddit';\r\nimport Post from './components/post/Post';\r\n\r\nexport default function App(): ReactElement {\r\n    return (\r\n        <Router basename={process.env.PUBLIC_URL}>\r\n            <Switch>\r\n                <Route exact path=\"/\">\r\n                </Route>\r\n                <Route path=\"/r/:id/comments/:postId\">\r\n                    <Post/>\r\n                </Route>\r\n                <Route path=\"/r/:id\">\r\n                    <Subreddit/>\r\n                </Route>\r\n            </Switch>\r\n        </Router>\r\n    );\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}