{"version":3,"sources":["api/APIClient.ts","api/SubredditClient.ts","components/common/Pill/index.tsx","components/common/Flair/index.tsx","components/subreddit/PostItem/index.tsx","components/subreddit/Subreddit.tsx","components/markdown/Markdown.tsx","components/common/Upvotes/index.tsx","components/post/Comment/index.tsx","components/post/Comments/index.tsx","components/post/Post.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["APIClient","DEVICE_ID","_token","url","params","this","getDefaultHeaders","headers","request","method","fetch","API_URL","fetchToken","Headers","Authorization","window","btoa","CLIENT_ID","body","encodeURIComponent","AUTH_URL","response","access_token","ok","json","authenticate","get","includes","Promise","reject","statusText","client","id","after","URLSearchParams","append","post","Pill","props","children","React","Children","toArray","some","x","toString","trim","style","className","Flair","backgroundColor","color","r","g","b","result","hex","exec","parseInt","hexToRgb","Math","floor","slice","toPastel","background","PostItem","stickied","to","href","target","hidden","thumbnail","alt","referrerPolicy","loading","src","onClick","event","stopPropagation","title","link_flair_background_color","link_flair_text_color","link_flair_text","ups","num_comments","author","Subreddit","useParams","useState","setAbout","posts","setPosts","useEffect","a","SubredditClient","about","data","map","value","index","Markdown","plugins","gfm","Upvotes","icon","undefined","Comment","isAuthor","comment","replies","Comments","comments","depth","Post","postId","setComments","setPost","selftext","App","basename","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2UAEMA,E,iDAKeC,UAAY,2B,KACrBC,Y,2FAEYC,EAAaC,G,gFAC1BA,IACCD,EAAG,UAAMA,EAAN,YAAaC,I,SAEEC,KAAKC,oB,cAArBC,E,OACAC,EAAuB,CACzBD,QAASA,EACTE,OAAQ,O,SAGCJ,KAAKK,MAASV,EAAUW,QAAUR,EAAKK,G,wSAIhDH,KAAKH,O,gCACeG,KAAKO,a,OAAzBP,KAAKH,O,uCAEF,IAAIW,QAAQ,CACfC,cAAc,UAAD,OAAYT,KAAKH,QAC9B,eAAgB,sB,kQAKdM,EAAuB,CACzBD,QAAS,CACLO,cAAc,SAAD,OAAYC,OAAOC,KAAP,UAAgBhB,EAAUiB,UAA1B,OACzB,eAAgB,oDAEpBR,OAAQ,OACRS,KAAK,cAAD,OAAiBC,mBAAmB,oDAApC,sBAAuGd,KAAKJ,Y,SAG7FI,KAAKK,MAAqBV,EAAUoB,SAAUZ,G,cAA/Da,E,yBACCA,EAASC,c,2KAGGnB,EAAaK,G,yFACTO,OAAOL,MAAMP,EAAKK,G,YAAnCa,E,QAEOE,G,gCACIF,EAASG,O,oDAEhBC,EAAeJ,EAASd,QAAQmB,IAAI,uBACtBD,EAAaE,SAAS,iB,kCAClBtB,KAAKO,a,eAAzBP,KAAKH,O,OACWM,EAAQD,QACjB,cAAP,iBAAsCF,KAAKH,Q,UAC9BG,KAAKK,MAASP,EAAKK,G,0EAE7BoB,QAAQC,OAAOR,EAASS,a,iHA1DrC9B,EACsBW,QAAU,4BADhCX,EAEsBoB,SAAW,6CAFjCpB,EAGsBiB,UAAY,iBA4DzB,UAAIjB,EC5CJ+B,EADF,I,uIAhBUC,G,iFACFhC,EAAU0B,IAAV,YAAmBM,EAAnB,W,+MAGEA,EAAYC,G,8EACrB7B,EAAS,IAAI8B,gBAAgB,CAAC,SAAY,MAC7CD,GACC7B,EAAO+B,OAAO,QAASF,G,SACdjC,EAAU0B,IAAV,YAAmBM,EAAnB,QAA6B5B,G,oNAGxB4B,EAAYI,G,iFACjBpC,EAAU0B,IAAV,YAAmBM,EAAnB,qBAAkCI,GAAQ,IAAIF,gBAAgB,CAAC,SAAY,O,gKCXjF,SAASG,EAAKC,GAEzB,OADoBA,EAAMC,UAAYC,IAAMC,SAASC,QAAQJ,EAAMC,UAAUI,MAAK,SAAAC,GAAC,OAAIA,EAAEC,WAAWC,UAG5F,sBAAKC,MAAQT,EAAMS,MAAQC,UAAU,OAArC,mCAA+CV,EAAMC,SAArD,OAGD,KCPI,SAASU,EAAMX,GAsB1B,IAAMS,EAAQ,CACVG,gBAtBJ,SAAkBC,GACd,IAOcC,EAAWC,EAAWC,EAP9BC,EAWV,SAAkBC,GACd,IAAMD,EAAS,4CAA4CE,KAAKD,GAChE,OAAOD,EAAS,CACZH,EAAGM,SAASH,EAAO,GAAI,IACvBF,EAAGK,SAASH,EAAO,GAAI,IACvBD,EAAGI,SAASH,EAAO,GAAI,KACvB,KAjBWI,CAASR,GACxB,OAAGI,GAMWH,EALMQ,KAAKC,OAAON,EAAOH,EAAI,KAAO,GAKzBC,EAL6BO,KAAKC,OAAON,EAAOF,EAAI,KAAO,GAKhDC,EALoDM,KAAKC,OAAON,EAAOD,EAAI,KAAO,GAM/G,MAAQ,GAAK,KAAOF,GAAK,KAAOC,GAAK,GAAKC,GAAGT,SAAS,IAAIiB,MAAM,IAJhEX,EAiBUY,CAASzB,EAAM0B,YAChCb,MAAuB,SAAhBb,EAAMa,MAAmB,UAAY,WAGhD,OACI,eAACd,EAAD,CAAMU,MAAOA,EAAb,cAAuBT,EAAMC,SAA7B,O,mBCvBO,SAAS0B,EAAS3B,GAC7B,IAE2BnC,EAFrB6C,EAAS,eAAWV,EAAMF,KAAK8B,SAAW,SAAW,IAM3D,OACI,cAAC,IAAD,CAAMC,GAAE,aAAS7B,EAAMN,GAAf,qBAAgCM,EAAMF,KAAKJ,IAAnD,8BACI,sBAAKgB,UAAWA,EAAhB,+BACI,mBAAGA,UAAU,YAAYoB,KAAM9B,EAAMF,KAAKjC,IAAKkE,OAAO,SAASC,QAPhDnE,EAO0EmC,EAAMF,KAAKmC,WANpGpE,GAAe,SAARA,GAMP,8BACI,qBAAKqE,IAAI,GAAGC,eAAe,cAAcC,QAAQ,OAAOC,IAAKrC,EAAMF,KAAKmC,UAAWK,QAAU,SAACC,GAAD,OAAWA,EAAMC,mBAA9G,yBAEJ,sBAAK9B,UAAU,OAAf,+BACI,mBAAGA,UAAU,QAAb,8BACI,iDAAKV,EAAMF,KAAK2C,UAEpB,sBAAK/B,UAAU,SAAf,+BACI,qBAAKA,UAAU,OAAf,8BACI,cAACC,EAAD,CAAOe,WAAa1B,EAAMF,KAAK4C,4BAA8B7B,MAAQb,EAAMF,KAAK6C,sBAAhF,8BACM3C,EAAMF,KAAK8C,oBAGrB,sBAAKlC,UAAU,QAAf,+BACI,eAACX,EAAD,gCACI,cAAC,IAAD,wBACA,oDAAQC,EAAMF,KAAK+C,SAEvB,eAAC9C,EAAD,gCACI,cAAC,IAAD,wBACA,oDAAQC,EAAMF,KAAKgD,kBAEvB,eAAC/C,EAAD,sCACO,uBAAMW,UAAU,SAAhB,oCAA6BV,EAAMF,KAAKiD,2BClC5D,SAASC,IAA2B,IACxCtD,EAAMuD,cAANvD,GADuC,EAGpBwD,qBAHoB,mBAGvCvD,EAHuC,aAIpBuD,sBAJoB,mBAIhCC,GAJgC,aAKpBD,qBALoB,mBAKvCE,EALuC,KAKhCC,EALgC,KAyB9C,OAlBAC,qBAAU,WAAM,4CACZ,4BAAAC,EAAA,sEAC2BC,EAAgBC,MAAM/D,GADjD,OACUX,EADV,OAEIoE,EAASpE,GAFb,4CADY,uBAAC,WAAD,wBAMZ0E,KACD,CAAC/D,IAEJ4D,qBAAU,WAAM,4CACZ,4BAAAC,EAAA,sEAC2BC,EAAgBJ,MAAM1D,EAAIC,GADrD,OACUZ,EADV,OAEIsE,EAAStE,GAFb,4CADY,uBAAC,WAAD,wBAMZqE,KACD,CAAC1D,EAAIC,IAGJ,qBAAKe,UAAU,YAAf,SACI,qBAAKA,UAAU,UAAf,gBACM0C,QADN,IACMA,OADN,EACMA,EAAOM,KAAKzD,SAAS0D,KAAI,SAACC,EAAOC,GAC/B,OACI,cAAClC,EAAD,CAAwB7B,KAAO8D,EAAMF,KAAOhE,GAAKA,GAAjCmE,U,6CChCzB,SAASC,EAAS9D,GAC7B,OAAGA,EAAMC,SAED,cAAC,IAAD,CAAe8D,QAAS,CAACC,KAAzB,8BAAkChE,EAAMC,WAGrC,K,qBCNA,SAASgE,EAAQjE,GAC5B,IAAIkE,EAAO,KAQX,YAPiBC,IAAdnE,EAAM6C,KAAmC,IAAd7C,EAAM6C,IAChCqB,EAAO,2DACHlE,EAAM6C,IAAM,EAChBqB,EAAO,cAAC,IAAD,wBACHlE,EAAM6C,IAAM,IAChBqB,EAAO,cAAC,IAAD,yBAGP,eAACnE,EAAD,gCACMmE,OACcC,IAAdnE,EAAM6C,KAAqB7C,EAAM6C,OCThC,SAASuB,EAAQpE,GAC5B,IAAMqE,EAAyC,oBAA9BrE,EAAMsE,QAAQZ,KAAKX,OAC9BrC,EAAS,kBAAc2D,EAAW,SAAW,IAEnD,OACI,qDAEQrE,EAAMsE,QAAQZ,KAAK9E,MACnB,sBAAK8B,UAAWA,EAAhB,+BACI,sBAAKA,UAAU,SAAf,+BACI,cAACX,EAAD,+BAAQC,EAAMsE,QAAQZ,KAAKX,SAC3B,cAACkB,EAAD,CAASpB,IAAK7C,EAAMsE,QAAQZ,KAAKb,IAAjC,0BAEJ,cAACiB,EAAD,+BAAY9D,EAAMsE,QAAQZ,KAAK9E,UAGrCoB,EAAMsE,QAAQZ,KAAKa,SAAW,cAACC,EAAD,CAAUC,SAAUzE,EAAMsE,QAAQZ,KAAKa,QAASG,MAAO1E,EAAM0E,MAAM,EAAnE,0B,OCnB7B,SAASF,EAASxE,GAC7B,IAAMU,EAAS,yBAAqBV,EAAM0E,MAA3B,YAAoC1E,EAAM0E,MAAQ,EAAI,WAAa,IAElF,OACI,qBAAKhE,UAAWA,EAAhB,8BACKV,EAAMyE,SAASf,KAAKzD,SAAS0D,KAAI,SAACC,EAAOC,GACtC,OAAO,cAACO,EAAD,CAASE,QAAUV,EAAQc,MAAQ1E,EAAM0E,MAAzC,sBAAuDb,QCA/D,SAASc,IAAsB,IAAD,EAClB1B,cAAfvD,EADiC,EACjCA,GAAIkF,EAD6B,EAC7BA,OAD6B,EAGT1B,qBAHS,mBAGlCuB,EAHkC,KAGxBI,EAHwB,OAIjB3B,qBAJiB,mBAIlCpD,EAJkC,KAI5BgF,EAJ4B,KAezC,OATAxB,qBAAU,WAAM,4CACZ,4BAAAC,EAAA,sEAC2BC,EAAgBiB,SAAS/E,EAAIkF,GADxD,OACU7F,EADV,OAEI+F,EAAQ/F,EAAS,GAAG2E,KAAKzD,SAAS,IAClC4E,EAAY9F,EAAS,IAHzB,4CADY,uBAAC,WAAD,wBAMZ0F,KACD,CAAE/E,EAAIkF,IAGL,qBAAKlE,UAAU,YAAf,8BACI,sBAAKA,UAAU,UAAf,+BACI,sBAAKA,UAAU,OAAf,+BACI,qBAAIA,UAAU,QAAd,0CAAyBZ,QAAzB,IAAyBA,OAAzB,EAAyBA,EAAM4D,KAAKjB,MAApC,OACA,cAACqB,EAAD,sCAAYhE,QAAZ,IAAYA,OAAZ,EAAYA,EAAM4D,KAAKqB,WACvB,sBAAKrE,UAAU,SAAf,+BACI,cAACX,EAAD,sCACMD,QADN,IACMA,OADN,EACMA,EAAM4D,KAAKX,SAEjB,cAACkB,EAAD,CAASpB,IAAG,OAAG/C,QAAH,IAAGA,OAAH,EAAGA,EAAM4D,KAAKb,IAA1B,6BAGR,qBAAKnC,UAAU,qBAAf,8BACM+D,GAAY,cAACD,EAAD,CAAUE,MAAO,EAAGD,SAAWA,EAA/B,8BCrCnB,SAASO,IACpB,OACI,cAAC,IAAD,CAAQC,SAAS,WAAjB,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,MAElB,cAAC,IAAD,CAAOA,KAAK,0BAAZ,SACI,cAACR,EAAD,MAEJ,cAAC,IAAD,CAAOQ,KAAK,SAAZ,SACI,cAAC,EAAD,WCbpB,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACf,EAAD,MAEFgB,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.d9adf0b6.chunk.js","sourcesContent":["import { OAuthResponse } from '../types';\r\n\r\nclass APIClient {\r\n    private static readonly API_URL = 'https://oauth.reddit.com/';\r\n    private static readonly AUTH_URL = 'https://www.reddit.com/api/v1/access_token';\r\n    private static readonly CLIENT_ID = 'LzBGozxpbmJNRA'\r\n\r\n    private readonly DEVICE_ID = 'DO_NOT_TRACK_THIS_DEVICE';\r\n    private _token?: string;\r\n\r\n    public async get<T>(url: string, params?: URLSearchParams): Promise<T> {\r\n        if(params)\r\n            url = `${url}?${params}`;\r\n\r\n        const headers = await this.getDefaultHeaders();\r\n        const request: RequestInit = {\r\n            headers: headers,\r\n            method: 'GET'\r\n        }\r\n\r\n        return await this.fetch<T>(APIClient.API_URL + url, request);\r\n    }\r\n\r\n    private async getDefaultHeaders(): Promise<Headers> {\r\n        if(!this._token)\r\n            this._token = await this.fetchToken();\r\n\r\n        return new Headers({\r\n            Authorization: `bearer ${this._token}`,\r\n            'Content-Type': 'application/json'\r\n        })\r\n    }\r\n\r\n    private async fetchToken(): Promise<string> {\r\n        const request: RequestInit = {\r\n            headers: {\r\n                Authorization: `Basic ${ window.btoa(`${ APIClient.CLIENT_ID }:`) }`,\r\n                'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'\r\n            },\r\n            method: 'POST',\r\n            body: `grant_type=${ encodeURIComponent('https://oauth.reddit.com/grants/installed_client') }&device_id=${ this.DEVICE_ID }`,\r\n        }\r\n\r\n        const response = await this.fetch<OAuthResponse>(APIClient.AUTH_URL, request);\r\n        return response.access_token;\r\n    }\r\n\r\n    private async fetch<T>(url: string, request: RequestInit): Promise<T> {\r\n        const response = await window.fetch(url, request);\r\n\r\n        if (response.ok)\r\n            return await response.json() as T;\r\n        else {\r\n            const authenticate = response.headers.get('www-authenticate')\r\n            if (authenticate && authenticate.includes('invalid_token')) {\r\n                this._token = await this.fetchToken();\r\n                const headers = request.headers as Record<string, string>;\r\n                headers['Authorization'] = `bearer ${ this._token }`;\r\n                return await this.fetch<T>(url, request);\r\n            }\r\n            return Promise.reject(response.statusText);\r\n        }\r\n    }\r\n}\r\n\r\nexport default new APIClient();\r\n","import { IAbout, Data, Listing, IPost } from '../types';\r\nimport APIClient from './APIClient';\r\n\r\nclass SubredditClient {\r\n    public async about(id: string): Promise<Data<IAbout>> {\r\n        return await APIClient.get(`r/${id}/about`);\r\n    }\r\n\r\n    public async posts(id: string, after?: string): Promise<Listing<IPost>> {\r\n        const params = new URLSearchParams({'raw_json': '1'});\r\n        if(after)\r\n            params.append('after', after);\r\n        return await APIClient.get(`r/${id}/hot`, params);\r\n    }\r\n\r\n    public async comments(id: string, post: string): Promise<Listing<any>[]> {\r\n        return await APIClient.get(`r/${id}/comments/${post}`, new URLSearchParams({'raw_json': '1'}))\r\n    }\r\n}\r\n\r\nvar client = new SubredditClient();\r\nexport default client;\r\n","import React, { CSSProperties, PropsWithChildren, ReactElement } from 'react';\r\nimport './Pill.scoped.scss';\r\n\r\ntype Props = { style?: CSSProperties };\r\n\r\nexport default function Pill(props: PropsWithChildren<Props>): ReactElement | null {\r\n    const hasChildren = props.children && React.Children.toArray(props.children).some(x => x.toString().trim());\r\n    if(hasChildren) {\r\n        return (\r\n            <div style={ props.style } className='pill'> { props.children } </div>\r\n        );\r\n    }\r\n    return null;\r\n}\r\n","import { PropsWithChildren, ReactElement } from 'react';\r\nimport Pill from '../Pill';\r\n\r\ntype Props = { background: string, color?: 'light' | 'dark' }\r\n\r\nexport default function Flair(props: PropsWithChildren<Props>): ReactElement {\r\n    function toPastel(color: string): string {\r\n        const result = hexToRgb(color);\r\n        if(result) {\r\n            return rgbToHex(Math.floor((result.r + 255) / 2), Math.floor((result.g + 255) / 2), Math.floor((result.b + 255) / 2));\r\n        }\r\n        return color;\r\n    }\r\n\r\n    function rgbToHex(r: number, g: number, b: number): string {\r\n        return \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\r\n    }\r\n\r\n    function hexToRgb(hex: string): { r: number, g: number, b: number } | null {\r\n        const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n        return result ? {\r\n            r: parseInt(result[1], 16),\r\n            g: parseInt(result[2], 16),\r\n            b: parseInt(result[3], 16)\r\n        } : null;\r\n    }\r\n\r\n    const style = {\r\n        backgroundColor: toPastel(props.background),\r\n        color: props.color === 'dark' ? '#263238' : '#ffffff'\r\n    };\r\n\r\n    return (\r\n        <Pill style={style}> { props.children } </Pill>\r\n    )\r\n}\r\n","import { ReactElement } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { IPost } from '../../../types';\r\nimport Flair from '../../common/Flair';\r\nimport './PostItem.scoped.scss';\r\nimport Pill from '../../common/Pill';\r\nimport { FaArrowUp, FaComment } from 'react-icons/all';\r\n\r\ntype Props = { id: string, post: IPost }\r\n\r\nexport default function PostItem(props: Props): ReactElement {\r\n    const className = `post ${props.post.stickied ? 'sticky' : ''}`\r\n\r\n    function isThumbnailHidden(url: string): boolean {\r\n        return !url || url === 'self';\r\n    }\r\n\r\n    return (\r\n        <Link to={`/r/${ props.id }/comments/${ props.post.id }`}>\r\n            <div className={className}>\r\n                <a className='thumbnail' href={props.post.url} target='_blank' hidden={isThumbnailHidden(props.post.thumbnail)}>\r\n                    <img alt='' referrerPolicy='no-referrer' loading='lazy' src={props.post.thumbnail} onClick={ (event) => event.stopPropagation() } />\r\n                </a>\r\n                <div className='body'>\r\n                    <p className='title'>\r\n                        <b>{ props.post.title }</b>\r\n                    </p>\r\n                    <div className='footer'>\r\n                        <div className='left'>\r\n                            <Flair background={ props.post.link_flair_background_color } color={ props.post.link_flair_text_color }>\r\n                                { props.post.link_flair_text }\r\n                            </Flair>\r\n                        </div>\r\n                        <div className='right'>\r\n                            <Pill>\r\n                                <FaArrowUp/>\r\n                                <span>{ props.post.ups }</span>\r\n                            </Pill>\r\n                            <Pill>\r\n                                <FaComment/>\r\n                                <span>{ props.post.num_comments }</span>\r\n                            </Pill>\r\n                            <Pill>\r\n                                by <span className='author'>u/{ props.post.author }</span>\r\n                            </Pill>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Link>\r\n    );\r\n}\r\n","import { ReactElement, useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Data, IAbout, IPost, Listing } from '../../types';\r\nimport SubredditClient from '../../api/SubredditClient';\r\nimport './Subreddit.css';\r\nimport PostItem from './PostItem';\r\n\r\ntype UrlParams = { id: string };\r\n\r\nexport default function Subreddit(): ReactElement {\r\n    const {id} = useParams<UrlParams>();\r\n\r\n    const [after, setAfter] = useState<string>();\r\n    const [about, setAbout] = useState<Data<IAbout>>();\r\n    const [posts, setPosts] = useState<Listing<IPost>>();\r\n\r\n    useEffect(() => {\r\n        async function about() {\r\n            const response = await SubredditClient.about(id);\r\n            setAbout(response);\r\n        }\r\n\r\n        about();\r\n    }, [id]);\r\n\r\n    useEffect(() => {\r\n        async function posts() {\r\n            const response = await SubredditClient.posts(id, after);\r\n            setPosts(response);\r\n        }\r\n\r\n        posts()\r\n    }, [id, after]);\r\n\r\n    return (\r\n        <div className='container'>\r\n            <div className='content'>\r\n                { posts?.data.children.map((value, index) => {\r\n                    return (\r\n                        <PostItem key={ index } post={ value.data } id={ id }/>\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import { ReactElement } from 'react';\r\nimport ReactMarkdown from 'react-markdown';\r\nimport gfm from 'remark-gfm';\r\nimport './Markdown.scoped.scss';\r\n\r\ntype Props = { children?: string }\r\n\r\nexport default function Markdown(props: Props): ReactElement | null {\r\n    if(props.children) {\r\n        return (\r\n            <ReactMarkdown plugins={[gfm]} >{ props.children }</ReactMarkdown>\r\n        );\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n","import { ReactElement } from 'react';\r\nimport Pill from '../Pill';\r\nimport { FaArrowDown, FaArrowUp, FaMinus } from 'react-icons/all';\r\nimport './Upvotes.scoped.scss';\r\n\r\ntype Props = { ups?: number };\r\n\r\nexport default function Upvotes(props: Props): ReactElement {\r\n    let icon = null;\r\n    if(props.ups === undefined || props.ups === 0)\r\n        icon = <span>~ </span>\r\n    else if(props.ups > 0)\r\n        icon = <FaArrowUp/>\r\n    else if(props.ups < 0)\r\n        icon = <FaArrowDown/>\r\n\r\n    return (\r\n        <Pill>\r\n            { icon }\r\n            { props.ups !== undefined && props.ups }\r\n        </Pill>\r\n    )\r\n}\r\n","import { ReactElement } from 'react';\r\nimport { Data, IComment } from '../../../types';\r\nimport Comments from '../Comments';\r\nimport './Comment.scoped.scss';\r\nimport Markdown from '../../markdown/Markdown';\r\nimport Pill from '../../common/Pill';\r\nimport Upvotes from '../../common/Upvotes';\r\n\r\ntype Props = { comment: Data<IComment>, depth: number }\r\n\r\nexport default function Comment(props: Props): ReactElement {\r\n    const isAuthor = props.comment.data.author === 'WellNowWhat6245';\r\n    const className = `comment ${isAuthor ? 'author' : ''}`;\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                props.comment.data.body &&\r\n                <div className={className}>\r\n                    <div className='header'>\r\n                        <Pill>{ props.comment.data.author }</Pill>\r\n                        <Upvotes ups={props.comment.data.ups} />\r\n                    </div>\r\n                    <Markdown>{ props.comment.data.body }</Markdown>\r\n                </div>\r\n            }\r\n            { props.comment.data.replies && <Comments comments={props.comment.data.replies} depth={props.depth+1} /> }\r\n        </div>\r\n    )\r\n}\r\n","import { ReactElement } from 'react';\r\nimport { IComment, Listing } from '../../../types';\r\nimport Comment from '../Comment';\r\nimport './Comments.scoped.scss'\r\n\r\ntype Props = { comments: Listing<IComment>, depth: number };\r\n\r\nexport default function Comments(props: Props): ReactElement {\r\n    const className = `comments depth-${props.depth} ${props.depth > 0 ? 'bordered' : ''}`;\r\n\r\n    return (\r\n        <div className={className}>\r\n            {props.comments.data.children.map((value, index) => {\r\n                return <Comment comment={ value } depth={ props.depth } key={ index }/>;\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n","import { ReactElement, useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport SubredditClient from '../../api/SubredditClient';\r\nimport { Data, Listing, IPost, IComment } from '../../types';\r\nimport Markdown from '../markdown/Markdown';\r\n\r\nimport './Post.scoped.scss';\r\nimport Comments from './Comments';\r\nimport Upvotes from '../common/Upvotes';\r\nimport Pill from '../common/Pill';\r\n\r\ntype UrlParams = { id: string, postId: string };\r\n\r\nexport default function Post(): ReactElement {\r\n    const { id, postId } = useParams<UrlParams>();\r\n\r\n    const [comments, setComments] = useState<Listing<IComment>>();\r\n    const [post, setPost] = useState<Data<IPost>>();\r\n\r\n    useEffect(() => {\r\n        async function comments() {\r\n            const response = await SubredditClient.comments(id, postId);\r\n            setPost(response[0].data.children[0] as Data<IPost>);\r\n            setComments(response[1]);\r\n        }\r\n        comments();\r\n    }, [ id, postId ]);\r\n\r\n    return (\r\n        <div className='container'>\r\n            <div className='content'>\r\n                <div className='post'>\r\n                    <h2 className='title'> { post?.data.title } </h2>\r\n                    <Markdown>{ post?.data.selftext }</Markdown>\r\n                    <div className='footer'>\r\n                        <Pill>\r\n                            { post?.data.author }\r\n                        </Pill>\r\n                        <Upvotes ups={ post?.data.ups }/>\r\n                    </div>\r\n                </div>\r\n                <div className='comments-container'>\r\n                    { comments && <Comments depth={0} comments={ comments }/> }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import { ReactElement } from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport Subreddit from './components/subreddit/Subreddit';\r\nimport Post from './components/post/Post';\r\n\r\nexport default function App(): ReactElement {\r\n    return (\r\n        <Router basename='/rclient'>\r\n            <Switch>\r\n                <Route exact path=\"/\">\r\n                </Route>\r\n                <Route path=\"/r/:id/comments/:postId\">\r\n                    <Post/>\r\n                </Route>\r\n                <Route path=\"/r/:id\">\r\n                    <Subreddit/>\r\n                </Route>\r\n            </Switch>\r\n        </Router>\r\n    );\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}